import re
import math
ga=open("Documents/Programming/ga","r").read()
wa=open("Documents/Programming/wa","r").read()
ga=re.sub('[\[\]]','',ga)
ga=ga.split(',')
wa=re.sub('[\[\]]','',wa)
wa=wa.split(',')
# ga=[0, 1, 1, 4, 25, 841, 749956, 563696135209, 317754178344723197077225L, 100967717855888389973004528722798800700252204356, 10194480049026283217304918048014173896648364893322762109171869301365366992922226561465025859561, 103927423469994929869877727987632937260736008668167913201776816265832125213002314437790795017528104105964750729382441442140418351355937108663554330747512372881509145558760964320151937382889L, 10800909349111652989779469293090617844002917029145175588998722818904658611186296750626955772928238390471004032358523876592838298080927690206316568460831364865660491363770938358980699091953787709629727904386931228924658341993777943889591274306369304541394706461488695954141328397305116436103174009362834633022757156566723104487306616711727894892580925463588707839434417482002500L, 116659642767727511443318209062128445025376801685881375319576379273359645933476715354918279303725689858809239529314667582600091393578826825423576756940674963727545319559399638122901220659964475220275484268798685869012540785633511477912300518311991919874182921162165009220003950622970179518962680873717386441306718567290538564427589029829165486370480915668762044654711962172138013348809943447694837562929896367991989675419748905395718960541845708323252455955919648434349121146759984025963492551263495056515937808589400060242812584378286784293953363250984285028715971230400693036208570276113705418291041636682150347933127182285172224938129874474551524153311018807887796710217025240877689447807352403312761087485598661816652472739513631710337068786506681321L, 13609472250693797866462342949488411954376342608878585946453406454420610574090242884258947432220934863167754687448071849376616162330701083841376619189623449941676773224752302270125123334057010519090497651836247393962046016136179905291539969358459717888092391556677257897389605882147451910167038728093136286220771213308344980798580445030423298135239801141265596409645217618172483608733410988137584786965738786157753092883555131945041098285532010271946592820157997539598927728285536880548279399051444937901599140767151720835884093775130581036138938584523173618924977980999947965267692580852420075675460062521569758604474333027977235001885317099512007183886245264678928183256675835171766062068668572157379491472279078113135440078558504904219076968679965577047137610340652563852253303640214088725065712944133224730695435394794939532970017504068691673366829608954607321808866971259918925735933530164842891974118401553058061761566868500855217971651427399104232495405731985632077517751341317920749191337254966030661514610212254987082235826022775363989098213546464769604999418680812682083107156437425914536135513974192530984670720619254084773426244556231357212558136112264671420861696413648179134620872478033592971692718169457452391184770247840576209686890165799598018005844417997154908229966245562136175249042856476539862337534789795433314057923828898311297265787077137093900747055350538407662753051549518407659588856182671149531119355226226108943397660290574592081006725734317938615410673185288299053023907160041L, 185217734942404508121938279561599087438950374598343474088709882916734582798250528467056858503863479626025186412590372635587350799996211188355499146477790264216622957178853680372987194543773215356104590105208827088462881808392501513386408696982213081373648870770096697014659295311994988113873198172942083253238353376832199082428610200092813820438209686948664927896940970034368836603245742911579829885103518627662823429572453973599116809482667439714327120255008418719327249869170484312036222380226457519035620216654721246261341788742025577669489814861550575401957235324582339066926680383925378610949926781063418687361547834624977499316389422914847548200026464448829108786692163902308921740639124166994270714623553367460995181760649724637240509486243096912262941030652472077606162556148826156480297929637715368635053901444149432680370745996633189973962208056155112040005733360170448789868838063918439543897041831055776765426187180032212192171344426935406750872460991048632577196460760657838909467721863961989046549728548583836633250712051055947960672147812603275663411473799195342910364851058466114393118871397027025041176282643272649189563851379709096065168671486409945647322400290898811067434628636001325169766061523962206295332759952200244350483349907113793450967707959097125383550516917793330548802689074116193556959186149940873094782429959386440375199103593561777485453336135982439093197417963448660556650086524685152026223482912630810223293782630219480095081127057137235832674634207609222503231463544057527447779329070330396845997843130206685578119189057791741608481471419378082725387925275094668107347211129844095736245099073732019562416569221326960841828261913517850307505193647512205345555251828229846964942989226056346984624825653382676117176318929793882541564416225712182092206916661753424895195111145588351288482064167243256474227949004817617831191939012800935814770881352647557433781341455694315332250633692610162109152891921948166236709545604920846868773458346387430505131725258182867014086724439483696819622821323944754646631779389474280021416280463160611726521039379745833000350113063012191133331200139805112227206654311321400817536976286299827039267715517495598278457618532560324749822775492237934131969161512827355788523734498279616237860416157381272207122723483116701976360122952519041525765328592027591398261909188593406297684994650189247627094708278665182922773518748888130213714366673891719201048509353853666559805019062709783777791736467437990591582209644504898359113713384616143961312246073090607800987837635119810799027113852021858134162250494810001552889464603565428861333545559582762002183573854679682870593894916307020979631831292853798049960458938897274370761462000137066883940151900922344436946437280899156884346252738847284963383330936398143569120099060623621749759942619856651438840132279012849174155122926584117559319525204896737791819369769145471809759526933150281768919773756497233571128384152566849072181404885089531996191851850483007934204488449519478325684667875112902015044L]
# wa=[0, 1, 1, 2, 5, 29, 866, 750797, 563696885165, 317754178345286893212434, 100967717855888389973004846476977145423449281581, 10194480049026283217304918048014173896648364893423729827027757691338371521645025362165278063917L, 103927423469994929869877727987632937260736008668167913201776816265832125213002314437790795017538298586013777012599746360188432525252585473556877092856684242182874512551683190881616963242450L, 10800909349111652989779469293090617844002917029145175588998722818904658611186296750626955772928238390471004032358523876592838298080927690206316568460831364865660491363770938358980699091953891637053197899316801106652645974931038679898259442219571081357660538586701698268579119192322644540209138760092217074464897574918079041595970171042475407265462434609147468803754569419385389L, 116659642767727511443318209062128445025376801685881375319576379273359645933476715354918279303725689858809239529314667582600091393578826825423576756940674963727545319559399638122901220659964475220275484268798685869012540785633511477912300518311991919874182921162165009220003950622970179518962680873717386441306718567290538564427589029829165486370480915668762044654711962172138024149719292559347827342399189458609833678336778050571307959264664612981863642252670275390122049385150455029995851075140087894814018736279606376811273415743152444785317134189343265727807925018110322764112957207342630076633035414626039939207433551589713619644591363170505665481708323924323899884226388075510712204963919126417248394102310389711545053664977220418176503203988683821L, 13609472250693797866462342949488411954376342608878585946453406454420610574090242884258947432220934863167754687448071849376616162330701083841376619189623449941676773224752302270125123334057010519090497651836247393962046016136179905291539969358459717888092391556677257897389605882147451910167038728093136286220771213308344980798580445030423298135239801141265596409645217618172483608733410988137584786965738786157753092883555131945041098285532010271946592820157997539598927728285536880548279399051444937901599140767151720835884093775130581036138938584523173618924977980999947965267692580852420075675460062521569758604474333027977235001885317099512007183886245264678928183256675835171766062068668572157379491472279078113135440078558504904219076968679965577163797253108380075295571512702342533750442514630014600050271814668154585466446732858986970977092519467763846851123534553860010319314760355588419648914793365280603381320966506623756438631615902619379716764204417854644618303384852795833049709649246885904844435772377264207086186448992954882951779087263851210911717985971351246510696186266591400906616429642954575639382682791392098122236188003926194775488032480256661096281445319043898095162718186356845427648637817891801512331530231866539702238153660856113955814433818057397720814344532346430128612293840761568578308765190488469522628199942603729588307423759287441833874237635710632600882926024069931812899874990558946241336380467103798391205012693887353168492324396134591088150186816998636121810413841362L]
# ga=[0,1]
# wa=[0,1]
# g2=[0,1]
# w2=[0,1]
# for i in xrange(2, 31):
#     ga.append((g2[i-1]+g2[i-2])+2*ga[i-1]*ga[i-2])
#     g2.append(ga[i]**2)
#     print i
# for i in range(2, 31):
#     wa.append(w2[i-1]+w2[i-2])
#     w2.append(wa[i]**2)
#     print i
for i in range(len(wa)-15):
    print int(ga[i])-int(wa[i+1])
go=open("Documents/Programming/ga","w")
wo=open("Documents/Programming/wa","w")
go.write(str(ga))
wo.write(str(wa))
print ga[:5]
print wa[:5]
print "hi"
# def g(x):
#     global ga
#     if x<len(ga):
#         return ga[x]
#     else:
#         if x<len(ga)+1:
#             s=(ga[x-1]+ga[x-2])^2
#         else:
#             s=(g(x-1)+g(x-2))**2
#         if x==len(ga):
#             ga+=[s]
#         return s
#
# def w(x):
#     global wa
#     if x<len(wa):
#         return wa[x]
#     else:
#         s=(w(x-1)**2)+(w(x-2)**2)
#         if x==len(wa):
#             wa+=[s]
#         return s


def f(x):
    return ga[x]-wa[x]
    # return g(x)-w(x)

def sumf(x):
    b=abs(f(x))
    sums=0
    for i in xrange(int(math.ceil(math.log(b)/math.log(10)))):
        if b==0:
             return sums
        m=b%10
        sums+=m
        b=(b-m)/10

    return sums


# for i in range(10):
#     print "g("+str(i)+"): "+str(g(i))
# for i in range(10):
#     print "w("+str(i)+"): "+str(w(i))
# print "\n\n"
def l(x):
    print "g("+str(x)+"): "+str(g(x))
    print "w("+str(x)+"): "+str(w(x))
    print "f("+str(x)+"): "+str(f(x))
    print "sumf"+str(x)+"): "+str(sumf(x))


# print sumf(15)
# for i in range(20):
#     print "sumf("+str(i)+"): "+str(sumf(i))
# for i in range(22):
#     if sumf(i)!=0:
#         print "sumf("+str(i+1)+")-sumf("+str(i)+"): "
#         # print sumf(i+1)-2*sumf(i)
# print sumf(30)
# print ga
# print wa
